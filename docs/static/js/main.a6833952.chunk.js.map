{"version":3,"sources":["components/AddCategory.js","helpers/getGif.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAmBhD,OACE,sBAAMC,SAVa,SAAEC,GACrBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAKhB,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SApBoB,SAAEP,GAC1BF,EAAcE,EAAEQ,OAAOF,a,+BCNdG,EAAM,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACdC,EADc,iDACkCC,UAAUH,GAD5C,+DAEDI,MAAMF,GAFL,cAEdG,EAFc,gBAGCA,EAAKC,OAHN,uBAGbC,EAHa,EAGbA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATlB,kBAabM,GAba,4CAAH,sDCANO,EAAc,SAAC,GAAmB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEnC,OACE,sBAAKc,UAAU,OAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IAClB,4BAAIA,QCHCO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAAEA,GAAe,IAAD,EAChBd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAH+B,mBACnCC,EADmC,KAC5BC,EAD4B,KAkB1C,OAZAC,qBAAW,WAETxB,EAAOC,GACJwB,MAAM,SAAAC,GACLH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAId,CAACpB,IAEGqB,EDf0BK,CAAc1B,GAAlCa,EAF0B,EAE/BN,KAAaa,EAFkB,EAElBA,QAGrB,OACE,qCACA,mCAAMpB,EAAN,OAECoB,EAAU,mBAAGJ,UAAU,mCAAb,qBAA8D,KAExE,qBAAKA,UAAU,gDAAf,SAEKH,EAAOJ,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAEMA,GADCA,EAAIC,aEfVgB,EAAe,WAAO,IAAD,EAEEzC,mBAAS,CAAC,KAFZ,mBAE3B0C,EAF2B,KAEf3C,EAFe,KAIhC,OACE,qCACE,yCACA,kDACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAGA,6BAEI2C,EAAWnB,KAAK,SAAAT,GAAQ,OACtB,cAAC,EAAD,CAEEA,SAAWA,GADLA,Y,MCdpB6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.a6833952.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = ( e ) => {\n    setInputValue(e.target.value)\n  }\n\n// El handleSubmit agrega valores al form al darle enter\n\n  const handleSubmit = ( e ) => {\n    e.preventDefault() // Previene que el form recargue la pÃ¡gina\n\n    if(inputValue.trim().length > 2) {\n      setCategories( cats => [ inputValue, ...cats]);\n      setInputValue('');\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input \n        type=\"text\"\n        value={inputValue}\n        onChange={ handleInputChange }\n      />\n    </form>\n  )\n}\n\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}","// getGif hace el llamado a la API\n\nexport const getGif = async(category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=ZGpqRWarUaSS8vl9PImdCXW11kLY4MET`;\n  const resp = await fetch(url);\n  const {data} = await resp.json();\n\n  const gifs = data.map( img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n    }\n  })\n\n  return gifs;\n}","import React from 'react';\n\nexport const GifGridItem = ({ title, url}) => {\n\n  return (\n    <div className=\"card\">\n      <img src={url} alt={title} />\n        <p>{title}</p>\n    </div>\n  )\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ( {category} ) => {\n\n  const { data:images, loading } = useFetchGifs( category );\n\n\n  return (\n    <>\n    <h3> {category} </h3>\n\n    {loading ? <p className=\"animate__animated animate__flash\">Loading</p> : null}\n\n    {<div className=\"card-grid animate__animated animate__bounceIn\">\n        {\n          images.map( img => (\n            <GifGridItem\n              key={img.id}\n              {...img}\n            />\n          ))\n        }\n    </div>}\n    </>\n  )\n}\n","import { useEffect, useState } from \"react\";\nimport {getGif} from '../helpers/getGif'\n\nexport const useFetchGifs = ( category ) => {\n  const [state, setstate] = useState({\n    data: [],\n    loading: true\n  });\n\n  useEffect( () => {\n\n    getGif(category)\n      .then( imgs => {\n        setstate({\n          data: imgs,\n          loading: false\n        })\n      })\n\n  }, [category])\n\n  return state;\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\nconst [categories, setCategories] = useState(['']);\n\n  return (\n    <>\n      <h2>GIF App</h2>\n      <h3>Search for a GIF</h3>\n      <AddCategory setCategories={ setCategories } />\n      <hr />\n\n\n      <ol>\n        {\n          categories.map( category => (\n            <GifGrid\n              key={ category }\n              category={ category }\n            />\n          ))\n        }\n      </ol>\n    </>\n  )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}